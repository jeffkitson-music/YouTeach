"""
YouTeach v1.0.5
Not finalized, still a few tweaks left to go...
"""

from appJar import gui
from PIL import Image, ImageTk
import os
import webbrowser
import webvtt
from pytube import YouTube
import moviepy.editor as mp


def start():
    instructions = app.questionBox("Welcome to YouTeach!", "Would you like to view the instructions page?")
    if instructions:
        webbrowser.open('https://github.com/jeffkitson-music/YouTeach')
        return
    else:
        return


def reset():
    app.clearAllEntries()
    app.clearAllCheckBoxes(callFunction=False)
    app.setLabel("status", "Video Link")


def process():
    global subtitles
    global yt
    # Get the video
    video_link = app.getEntry("Video Link")
    subtitles = app.getCheckBox("Get Subtitles?")
    if video_link == "":
        app.setLabel("status", "No Link Provided!")
        return
    try:
        yt = YouTube(video_link)
    except:
        app.setLabel("status", "Invalid Link!")
        return
    video = app.threadCallback(get_video_info, saving_function, yt)
    return video


def get_video_info(yt):
    global video
    app.setLabel("status", "Getting Info...")
    try:
        video = yt.streams.filter(progressive=True, file_extension='mp4').order_by('resolution').desc().first()
        app.setLabel("status", "Saving...")  # this makes no gd sense here...
    except:
        app.setLabel("status", "Error getting info...")
    return


def saving_function(success):
    global video
    global save_location

    save_location = app.saveBox(title=None, fileName=video.title, dirName=None, fileExt=".mp4",
                                fileTypes=[('MP4 Video', '*.mp4'), ('MP3 Audio', '*.mp3'), ("All Files", '*.*')],
                                asFile=None, parent=None)
    if save_location == "":  # If the user hits cancel...
        app.setLabel("status", "Download cancelled!")
        return
    else:
        if save_location[-3:].lower() == "mp4":
            app.threadCallback(download_video, complete, video, save_location)
        elif save_location[-3:].lower() == "mp3":
            app.threadCallback(download_audio, complete, video, save_location)


def check_subtitles(save_location):
    # Caption info is in the yt object, not the video stream object
    global yt
    app.setLabel("status", "Getting captions...")
    location = os.path.split(save_location)
    save_path = location[0]
    filename = location[1]
    caption_filename = location[1][:-4] + ".srt"
    try:
        if 'en' in yt.captions or 'a.en' in yt.captions:  # a.en is autogenerated
            if 'en' in yt.captions:
                caption = yt.captions['en']
            else:
                caption = yt.captions['a.en']
            srt_captions = caption.generate_srt_captions()

            with open(os.path.join(save_path, caption_filename), "a", encoding='utf-8') as f:
                f.write(srt_captions)
            webvtt.from_srt(os.path.join(save_path, caption_filename)).save()  # creates a .vtt file
            os.remove(os.path.join(save_path, caption_filename))  # removes the srt file
            return

        else:
            app.warningBox("No Captions!", "No English captions are available for this video.")
            return
    except:
        app.warningBox("No Captions!", "No captions are available for this video.")
        return


def download_video(video, save_location):
    app.setLabel("status", "Downloading video...")
    location = os.path.split(save_location)
    save_path = location[0]
    filename = location[1]
    try:
        video_save = video.download(output_path=save_path, filename=filename)
    except:
        app.setLabel("status", "Error downloading video!")
    return


def download_audio(video, save_location):
    app.setLabel("status", "Downloading audio...")
    location = os.path.split(save_location)
    save_path = location[0]
    filename = location[1]
    try:
        video.download(output_path=save_path, filename=location[1])
    except:
        app.setLabel("status", "Error downloading audio!")
        return
    try:
        convert_audio(filename, save_path)
    except:
        app.setLabel("status", "Error converting audio!")
        return
    return


def convert_audio(filename, save_path):
    filename_split = filename.split(".")
    mp3_filename = filename_split[0] + ".mp3"
    clip = mp.AudioFileClip(os.path.join(save_path, filename))  # was just filename
    clip.write_audiofile(os.path.join(save_path, mp3_filename))
    # Delete the audio-only MP4 file used for conversion...
    if os.path.exists(filename_split[0] + ".mp4"):
        os.remove(filename_split[0] + ".mp4")  # make sure the path is correct and you're not leaving trash...
    return


def complete(success):
    global subtitles
    if subtitles:
        app.threadCallback(check_subtitles, final, save_location)
    else:
        print(success)  # T/F I think....
        app.setLabel("status", "Done!")


def final(success):
    global save_location
    app.setLabel("status", "Done!")


with gui("YouTeach Demo v1.0.5", "500x500", bg='#282828', fg="white",
         font={'size': 16, 'family': "Roboto Light"}) as app:
    app.enableEnter(process)
    app.setPadding([10, 10])
    app.setIcon("youtube_playbtn150.ico")
    app.setInPadding([10, 10])
    photo = ImageTk.PhotoImage(Image.open("youtube_playbtn150.png"))
    app.addImageData("pic", photo, fmt="PhotoImage")
    app.label("status", "Video Link", font={'size': 20, 'family': "Roboto Light"})
    app.entry("Video Link", label=False, focus=True)
    app.addCheckBox("Get Subtitles?")
    app.setCheckBoxFg("Get Subtitles?", "#FFFFFF")
    app.setCheckBoxSelectColour("Get Subtitles?", "#282828")
    app.setLabelFg("status", "white")
    app.setButtonFont(family="Roboto Light", size=20)
    app.buttons(["Download", "Reset", "Quit"], [process, reset, app.stop])
    app.setStartFunction(start)
